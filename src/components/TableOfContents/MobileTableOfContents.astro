---
import TableOfContentsList from './TableOfContentsList.astro'
import type { TocItem } from './generateToC'
import { Icon } from 'astro-icon'

interface Props {
  toc: TocItem[]
  maxHeadingLevel: number
  minHeadingLevel: number
}

const { toc, maxHeadingLevel, minHeadingLevel } = Astro.props
---

<mobile-starlight-toc data-min-h={minHeadingLevel} data-max-h={maxHeadingLevel}>
  <nav
    aria-labelledby="starlight__on-this-page--mobile"
    class="lg:hidden bg-white dark:bg-[#24272d] dark:text-white text-gray-900 border-white"
  >
    <details id="starlight__mobile-toc">
      <summary id="on-this-page--mobile" class="flex">
        <div class="toggle flex">
          本文目录
          <Icon name="el:chevron-right" class="caret" size="0.5rem" />
        </div>
        <span class="display-current">{toc[0]?.text}</span>
      </summary>
      <div class="dropdown border-white">
        <TableOfContentsList toc={toc} isMobile />
      </div>
    </details>
  </nav>
</mobile-starlight-toc>

<style>
  nav {
    position: fixed;
    top: calc(3.5rem - 1px);
    inset-inline: 0;
    border-top: 1px solid #edeef3;
  }

  summary {
    gap: 0.5rem;
    align-items: center;
    height: 48px;
    border-bottom: 1px solid #edeef3;
    @apply dark:border-gray-700;
    padding: 0.5rem 1rem;
    font-size: 12px;
  }
  summary::marker,
  summary::-webkit-details-marker {
    display: none;
  }

  .toggle {
    flex-shrink: 0;
    gap: 1rem;
    align-items: center;
    justify-content: space-between;
    border: 1px solid #edeef3;
    border-radius: 0.5rem;
    padding-block: 0.5rem;
    padding-inline-start: 0.75rem;
    padding-inline-end: 0.5rem;
    line-height: 1;
    user-select: none;
    cursor: pointer;
    @apply dark:border-gray-700;
  }
  details[open] .toggle {
    border-color: #c0c2c9;
  }
  details .toggle:hover {
    border-color: #c0c2c9;
  }

  :global([dir='rtl']) .caret {
    transform: rotateZ(180deg);
  }
  details[open] .caret {
    transform: rotateZ(90deg);
  }

  .display-current {
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
  }

  .dropdown {
    border-top-color: #16181d;
    max-height: calc(85vh - 3.5rem - 3rem);
    overflow-y: auto;
    box-shadow: 0 8px 4px hsl(0deg 0% 0% / 8%), 0 5px 2px hsl(0deg 0% 0% / 8%), 0 3px 2px hsl(0deg 0% 0% / 12%),
      0 1px 1px hsl(0deg 0% 0% / 15%);
  }
</style>

<script>
  import { StarlightTOC } from './starlight-toc'

  class MobileStarlightTOC extends StarlightTOC {
    override set current(link: HTMLAnchorElement) {
      super.current = link
      const display = this.querySelector('.display-current') as HTMLSpanElement
      if (display) display.textContent = link.textContent
    }

    constructor() {
      super({ smallViewport: true })
      const details = this.querySelector('details')
      if (!details) return
      const closeToC = () => {
        details.open = false
      }
      // Close the table of contents whenever a link is clicked.
      details.querySelectorAll('a').forEach((a) => {
        a.addEventListener('click', closeToC)
      })
      // Close the table of contents when a user clicks outside of it.
      window.addEventListener('click', (e) => {
        if (!details.contains(e.target as Node)) closeToC()
      })
      // Or when they press the escape key.
      window.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && details.open) {
          const hasFocus = details.contains(document.activeElement)
          closeToC()
          if (hasFocus) {
            const summary = details.querySelector('summary')
            if (summary) summary.focus()
          }
        }
      })
    }
  }

  customElements.define('mobile-starlight-toc', MobileStarlightTOC)
</script>
